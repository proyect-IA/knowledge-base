
%predicado para abrir un archivo -------------------------------------------------------------------------
abrir(KB):-
	open('/Users/juan/Desktop/Proyecto Representacion del conocimiento/KnowledgeBase/KB.txt',read,Stream),
	readclauses(Stream,X),
	close(Stream),
	atom_to_term_conversion(X,KB).

%--------------------------------------------------------------------------------------------------------


% predicado para guardar un archivo ---------------------------------------------------------------------
guardar(KB):-
	open('/Users/juan/Desktop/Proyecto Representacion del conocimiento/KnowledgeBase/KB.txt',write,Stream),
	writeq(Stream,KB),
	close(Stream).

%--------------------------------------------------------------------------------------------------------



%predicados auxiliares para el manejo de archivos -------------------------------------------------------

readclauses(InStream,W) :-
        get0(InStream,Char),
        checkCharAndReadRest(Char,Chars,InStream),
	atom_chars(W,Chars). 

checkCharAndReadRest(-1,[],_) :- !.  % End of Stream	
checkCharAndReadRest(end_of_file,[],_) :- !.

checkCharAndReadRest(Char,[Char|Chars],InStream) :-
        get0(InStream,NextChar),
        checkCharAndReadRest(NextChar,Chars,InStream).

atom_to_term_conversion(ATOM, TERM) :-
	 atom(ATOM),
	 atom_to_chars(ATOM,STR),
	 atom_to_chars('.',PTO),
	 append(STR,PTO,STR_PTO),
	 read_from_chars(STR_PTO,TERM).

%--------------------------------------------------------------------------------------------------------


%predicado para cambiar el nombre de una clase ----------------------------------------------------------

cambiar_nombre_clase(Clase,NombreNuevo,KB,KBNueva):-
	cambiarElemento(class(Clase,Mother,Props,Rels,Objects),class(NombreNuevo,Mother,Props,Rels,Objects),KB,TemporalKB),
	cambiarPadre(Clase,NombreNuevo,TemporalKB,TemporalKB2),
	cambiar_relaciones_con_objetos(Clase,NombreNuevo,TemporalKB2,KBNueva).

%---------------------------------------------------------------------------------------------------------


%predicados para encontrar los elementos hijos de una clase ----------------------------------------------

hijos_clase(Clase, KB, Resultado):-
es_clase(Clase,KB,si), %aqui se valida que sea una clase
	hijos_de_clase(Clase,KB,Resultado).
hijos_clase(_,_,desconocido).

hijos_de_clase(_,[],[]).
hijos_de_clase(Class,[class(Son,Class,_,_,_)|T],Sons):-
	hijos_de_clase(Class,T,Brothers),	
	append([Son],Brothers,Sons).
hijos_de_clase(Class,[_|T],Sons):-
	hijos_de_clase(Class,T,Sons).

%--------------------------------------------------------------------------------------------------------


%predicados auxiliares en las validaciones --------------------------------------------------------------

es_clase(_,[],desconocido):- write('Desconocido').

es_clase(Clase,[class(not(Clase),_,_,_,_)|_],no):- wrilte('No').
es_clase(Clase,[class(Clase,_,_,_,_)|_],si).
es_clase(Clase,[_|T],Resultado):-
	es_clase(Clase,T,Resultado).

%--------------------------------------------------------------------------------------------------------


%extension de la clase ----------------------------------------------------------------------------------

%predicado que obtiene la extensión de una clase en especifico
extension_de_clase(Clase,KB,Individuos):-
individuos_de_una_clase(Clase,KB,Individuos).

%este predicado es el encargado de obtiener los individos de una clase y de sus descendientes,
%recive el la clase en la que se buscar, la base, y regresa una lista de Individuos
individuos_de_una_clase(Clase,KB,Individuos):-
es_clase(Clase,KB,K), 				         %primero tenemos que validar que en verdad es una clase
individuos_especificos_de_clase(Clase,KB,IndividuosLocales),
obtener_individuos_hijos(Clase,KB,IndivudosHijo,KB),
append(IndividuosLocales,IndivudosHijo,Individuos).

%clase que detiene la recursividad, si no se conocen los individos, se llama este predicado
individuos_especificos_de_clase(_,[],desconocido).

%predicado que permite obtener la lista de individos especificos de una clase.
individuos_especificos_de_clase(Clase,[class(Clase,_,_,_,Indi)|_],Individuos):-
obtener_nombres_individuos(Indi,Individuos). %Aqui se llama al hecho que obtiene los nombres de los individos para concetenarlos

%Con ayuda de este predicado se puede iterar por la lista de clases hasta encontra la clase que nos interesa y obtener los individos
individuos_especificos_de_clase(Clase,[_|T],Individuos):-
individuos_especificos_de_clase(Clase,T,Individuos).

obtener_nombres_individuos([],[]). %Predicado base para detener la recursividad, cuando ya no existen elementos

obtener_nombres_individuos([[id=>Nombre,_,_]|T],Individuos):-
obtener_nombres_individuos(T,Restantes),
append([Nombre],Restantes,Individuos).

obtener_individuos_hijos(Clase,KB,Individuos,Respaldo):-
obtener_individuos_hijos_descendientes([Clase],KB,Individuos,Respaldo).

obtener_individuos_hijos_descendientes([ClasePadre|R],[class(ClaseHijo,ClasePadre,_,_,[[id=>Nombre,_,_]|[A|B]])|Resto],Individuos,Respaldo):-
append([ClasePadre|R],[ClaseHijo],Pila),												%se agrega un nuevo nodo por visitar
obtener_nombres_individuos([A|B],Restantes), 									%se obtiene todos los individuos
append([Nombre],Restantes,X),
obtener_individuos_hijos_descendientes(Pila,Resto,IndividuosHermanos,Respaldo), %se llama nuevamente al predicado
append(X,IndividuosHermanos,Individuos).

obtener_individuos_hijos_descendientes([ClasePadre|R],[class(ClaseHijo,ClasePadre,_,_,[[id=>Nombre,_,_]|[]])|Resto],Individuos,Respaldo):-
append([ClasePadre|R],[ClaseHijo],Pila), 														%se agregar un nuevo nodo por visitar
obtener_individuos_hijos_descendientes(Pila,Resto,Restantes,Respaldo),
append([Nombre],Restantes,Individuos).

obtener_individuos_hijos_descendientes([ClasePadre|R],[class(ClaseHijo,ClasePadre,_,_,[])|Resto],Individuos,Respaldo):-
append([ClasePadre|R],[ClaseHijo],Pila), 														%se agregar un nuevo nodo por visitar
obtener_individuos_hijos_descendientes(Pila,Resto,Individuos,Respaldo).

obtener_individuos_hijos_descendientes(ClasePadre,[_|X],Individuos,Respaldo):-
obtener_individuos_hijos_descendientes(ClasePadre,X,Individuos,Respaldo).

obtener_individuos_hijos_descendientes([],[],[],_).

obtener_individuos_hijos_descendientes([_|T],[],Individuos,Respaldo):-
obtener_individuos_hijos_descendientes(T,Respaldo,Individuos,Respaldo).
%--------------------------------------------------------------------------------------------------------




%Aqui obtenemos la extensión de una propiedad -----------------------------------------------------------

%--------------------------------------------------------------------------------------------------------





%definicion de los operadores ---------------------------------------------------------------------------

:- op(500,xfy, =>).  %operador de asignacion
:- op(501,xfy, =>>). %operador de implicación
%--------------------------------------------------------------------------------------------------------
