
%predicado para abrir un archivo -------------------------------------------------------------------------
abrir(KB):- 
	open('/Users/juan/Desktop/Proyecto Representacion del conocimiento/KnowledgeBase/KB.txt',read,Stream),
	readclauses(Stream,X),
	close(Stream),
	atom_to_term_conversion(X,KB).

%--------------------------------------------------------------------------------------------------------

 
% predicado para guardar un archivo ---------------------------------------------------------------------
guardar(KB):-
	open('/Users/juan/Desktop/Proyecto Representacion del conocimiento/KnowledgeBase/KB.txt',write,Stream),
	writeq(Stream,KB),
	close(Stream).

%--------------------------------------------------------------------------------------------------------


%predicados auxiliares para el manejo de archivos -------------------------------------------------------

readclauses(InStream,W) :-
        get0(InStream,Char),
        checkCharAndReadRest(Char,Chars,InStream),
	atom_chars(W,Chars). 

checkCharAndReadRest(-1,[],_) :- !.  % End of Stream	
checkCharAndReadRest(end_of_file,[],_) :- !.

checkCharAndReadRest(Char,[Char|Chars],InStream) :-
        get0(InStream,NextChar),
        checkCharAndReadRest(NextChar,Chars,InStream).

atom_to_term_conversion(ATOM, TERM) :-
	 atom(ATOM),
	 atom_to_chars(ATOM,STR),
	 atom_to_chars('.',PTO),
	 append(STR,PTO,STR_PTO),
	 read_from_chars(STR_PTO,TERM).

%--------------------------------------------------------------------------------------------------------


%predicado para cambiar el nombre de una clase ----------------------------------------------------------

cambiar_nombre_clase(Clase,NombreNuevo,KB,KBNueva):-
	cambiarElemento(class(Clase,Mother,Props,Rels,Objects),class(NombreNuevo,Mother,Props,Rels,Objects),KB,TemporalKB),
	cambiarPadre(Clase,NombreNuevo,TemporalKB,TemporalKB2),
	cambiar_relaciones_con_objetos(Clase,NombreNuevo,TemporalKB2,KBNueva).

%---------------------------------------------------------------------------------------------------------


%predicados para encontrar los elementos hijos de una clase ----------------------------------------------

hijos_clase(Clase, KB, Resultado):-
es_clase(Clase,KB,si), %aqui se valida que sea una clase
	hijos_de_clase(Clase,KB,Resultado).
hijos_clase(_,_,desconocido).

hijos_de_clase(_,[],[]).
hijos_de_clase(Class,[class(Son,Class,_,_,_)|T],Sons):-
	hijos_de_clase(Class,T,Brothers),	
	append([Son],Brothers,Sons).
hijos_de_clase(Class,[_|T],Sons):-
	hijos_de_clase(Class,T,Sons).

%--------------------------------------------------------------------------------------------------------


%predicados auxiliares en las validaciones --------------------------------------------------------------

es_clase(_,[],desconocido).

es_clase(Clase,[class(not(Clase),_,_,_,_)|_],no).
es_clase(Clase,[class(Clase,_,_,_,_)|_],si).
es_clase(Clase,[_|T],Resultado):-
	es_clase(Clase,T,Resultado).

%--------------------------------------------------------------------------------------------------------


%extension de la clase ----------------------------------------------------------------------------------

%predicado que obtiene la extensi贸n de una clase en especifico
extension_de_clase(Clase,KB,Individuos):-
	individuos_de_una_clase(Clase,KB,Individuos).

%este predicado es el encargado de obtiener los individos de una clase y de sus descendientes,
%recive el la clase en la que se buscar, la base, y regresa una lista de Individuos
%primero tenemos que validar que en verdad es una clase
individuos_de_una_clase(Clase,KB,Individuos):-
	es_clase(Clase,KB,_), 				         
	individuos_especificos_de_clase(Clase,KB,IndividuosLocales),
	obtener_individuos_hijos(Clase,KB,IndivudosHijo,KB),
	append(IndividuosLocales,IndivudosHijo,Individuos).

%clase que detiene la recursividad, si no se conocen los individos, se llama este predicado
individuos_especificos_de_clase(_,[],desconocido).

%predicado que permite obtener la lista de individos especificos de una clase.
%Se llama al hecho que obtiene los nombres de los individos para concetenarlos
individuos_especificos_de_clase(Clase,[class(Clase,_,_,_,Indi)|_],Individuos):-
	obtener_nombres_individuos(Indi,Individuos). 

%Con ayuda de este predicado se puede iterar por la lista de clases hasta encontra la clase que nos interesa y obtener los individos
individuos_especificos_de_clase(Clase,[_|T],Individuos):-
	individuos_especificos_de_clase(Clase,T,Individuos).

%Predicado base para detener la recursividad, cuando ya no existen elementos
obtener_nombres_individuos([],[]).  

obtener_nombres_individuos([[id=>Nombre,_,_]|T],Individuos):-
	obtener_nombres_individuos(T,Restantes),
	append(Nombre,Restantes,Individuos).

obtener_individuos_hijos(Clase,KB,Individuos,Respaldo):-
	obtener_individuos_hijos_descendientes([Clase],KB,Individuos,Respaldo).

%se agrega un nuevo nodo por visitar
%se obtiene todos los individuos
%se llama nuevamente al predicado
obtener_individuos_hijos_descendientes([ClasePadre|R],[class(ClaseHijo,ClasePadre,_,_,[[id=>[Nombre|RestoNombres],_,_]|[A|B]])|Resto],Individuos,Respaldo):-
	append([ClasePadre|R],[ClaseHijo],Pila),												
	obtener_nombres_individuos([A|B],Restantes), 									
	append([Nombre|RestoNombres],Restantes,X),
	obtener_individuos_hijos_descendientes(Pila,Resto,IndividuosHermanos,Respaldo), 
	append(X,IndividuosHermanos,Individuos).

obtener_individuos_hijos_descendientes([ClasePadre|R],[class(ClaseHijo,ClasePadre,_,_,[[id=>[Nombre|RestoNombres],_,_]|[]])|Resto],Individuos,Respaldo):-
	append([ClasePadre|R],[ClaseHijo],Pila), 														
	obtener_individuos_hijos_descendientes(Pila,Resto,Restantes,Respaldo),
	append([Nombre|RestoNombres],Restantes,Individuos).

obtener_individuos_hijos_descendientes([ClasePadre|R],[class(ClaseHijo,ClasePadre,_,_,[])|Resto],Individuos,Respaldo):-
	append([ClasePadre|R],[ClaseHijo],Pila), 														
	obtener_individuos_hijos_descendientes(Pila,Resto,Individuos,Respaldo).

obtener_individuos_hijos_descendientes(ClasePadre,[_|X],Individuos,Respaldo):-
	obtener_individuos_hijos_descendientes(ClasePadre,X,Individuos,Respaldo).

obtener_individuos_hijos_descendientes([],[],[],_).

obtener_individuos_hijos_descendientes([_|T],[],Individuos,Respaldo):-
	obtener_individuos_hijos_descendientes(T,Respaldo,Individuos,Respaldo).
%--------------------------------------------------------------------------------------------------------

imprime_lista_resultados([]).

imprime_lista_resultados([A|B]):-
	write(A),tab(3),
	imprime_lista_resultados(B).

%Aqui obtenemos la extensi贸n de una propiedad -----------------------------------------------------------

%predicado principal para obtener la extensi贸n de una propiedad
extension_propiedad(Propiedad,KB,Extension):-
	obtener_extension_propiedad(top,Propiedad,[],KB,Extension,[]),	
	imprime_lista_resultados(Extension).

/* predica que permite obtener la extensi贸n de una propiedad, regresa los individios que la poseen ya sea por que la tiene propiamente, es heredada o inferida */
obtener_extension_propiedad(Padre,PropiedadBuscar,PropiedadesPropidas,KB,Extension,PreferenciasHeredadas):-
	%primero obtiene todos sus hijos
	obtener_hijos(Padre,KB,Hijos),
	
	%obtiene las propiedades de la clase			
	obtener_propiedades_clase(Padre,KB,PropiedadesClase),

	%obtiene las preferencias de la clase
	obtener_preferencias_clase(Padre,KB,PreferenciasClase),
	append(PropiedadesClase,PropiedadesPropidas,PropiedadesHerencia),
	decide_heredar_preferencias(PreferenciasClase,PreferenciasHeredadas,PreferenciasHerencia),
	bajar_por_hijos_propiedad(Padre,Hijos,PropiedadBuscar,PropiedadesHerencia,KB,Extension,PreferenciasHerencia).

decide_heredar_preferencias([[]],Hereda,Hereda).
decide_heredar_preferencias([],Hereda,Hereda).

decide_heredar_preferencias(PreferenciasClase,PreferenciasHeredadas,PreferenciasHerencia):-
	append(PreferenciasClase,PreferenciasHeredadas,PreferenciasHerencia).

%predicado base que detine la recursividad de prolog
obtener_extension_propiedad([],_,_,_,[]).

obtener_propiedades_individuos_clase(Clase,_,_,[class(Clase,_,_,_,[])|_],[],_).

obtener_propiedades_individuos_clase(Clase,PropBus,PropHerencia,[class(Clase,_,_,_,[[id=>Nombres,PropPrefIndividuos,_]|NombresRestantes])|Resto],Extension,PrefHerencia):-	
	extraer_todas_propiedades_individuo(PropPrefIndividuos,PropHerencia,PrefHerencia,PropInferidasCompletas), % aqui se realizan todas las inferencias, ahora solo buscamos la propiedad que nos interesa	
	obtener_propiedades_individuos_clase(Clase,PropBus,PropHerencia,[class(Clase,_,_,_,NombresRestantes)|Resto],ExtensionDemasIndividuos,PrefHerencia),
	verificar_existencia_propiedad(PropBus,PropInferidasCompletas,ResultadoBusqueda,Nombres),
	append([ResultadoBusqueda],ExtensionDemasIndividuos,Extension).

obtener_propiedades_individuos_clase(Clase,PropiedadBuscar,PropiedadesHeredadas,[_|T],Extension,PreferenciasHerencia):-
	obtener_propiedades_individuos_clase(Clase,PropiedadBuscar,PropiedadesHeredadas,T,Extension,PreferenciasHerencia).

%predicado que detiene la recursividad
obtener_propiedades_individuos_clase(_,_,_,[],[],_).

%caso base que detiene la recursividad
verificar_existencia_propiedad(_,[],R,Nombres):-
 	append(Nombres,[desconocido],R).

verificar_existencia_propiedad(PropiedadBuscar,[PropiedadBuscar=>(Valor,Peso)|_],R,Nombres):-
	append(Nombres,[PropiedadBuscar=>(Valor,Peso)],R).

verificar_existencia_propiedad(PropiedadBuscar,[_|B],R,Nombres):-
	verificar_existencia_propiedad(PropiedadBuscar,B,R,Nombres).

extraer_propiedades_individuos(PropiedadBuscar,PropiedadesHeredadas,[[id=>[Nombre|RestoNombres],[A|B],_]|Resto],Extension,PreferenciasHerencia):-
	append([A|B],PropiedadesHeredadas,PropiedadesMescladaz),
	buscar_propiedad(PropiedadBuscar,PropiedadesMescladaz,Peso,ValorPorDefecto),
	prepar_proceso_inferencia(PreferenciasHerencia,PropiedadBuscar,PropiedadesMescladaz,ValorInferido,ValorPorDefecto),
	extraer_propiedades_individuos(PropiedadBuscar,PropiedadesHeredadas,Resto,RestoIndividuos,PreferenciasHerencia),
	append([Nombre|RestoNombres],[ValorInferido],Ind1),
	append([Ind1],RestoIndividuos,Extension).

extraer_propiedades_individuos(PropiedadBuscar,PropiedadesHeredadas,[[id=>[Nombre|RestoNombres],[],_]|Resto],Extension,PreferenciasHerencia):-
	buscar_propiedad(PropiedadBuscar,PropiedadesHeredadas,Peso,ValorPorDefecto),
	prepar_proceso_inferencia(PreferenciasHerencia,PropiedadBuscar,PropiedadesHeredadas,ValorInferido,ValorPorDefecto),	
	extraer_propiedades_individuos(PropiedadBuscar,PropiedadesHeredadas,Resto,RestoIndividuos,PreferenciasHerencia),
	append([Nombre|RestoNombres],[ValorInferido],Ind1),
	append([Ind1],RestoIndividuos,Extension).

extraer_propiedades_individuos(PropiedadBuscar,PropiedadesHeredadas,[_|Resto],Extension,PreferenciasHerencia):-
	extraer_propiedades_individuos(PropiedadBuscar,PropiedadesHeredadas,Resto,Extension,PreferenciasHerencia).

extraer_propiedades_individuos(_,_,[],[],_).

inferir_propiedad([],_,_,A,A).

inferir_propiedad([Antecedentes=>>Buscar=>(Valor,Peso)|_],Buscar,Propiedades,Resultado,Inferido):-
	compara_preferencias(Antecedentes,Propiedades,Desicion),
	inferencia_nueva_propiedad(Desicion,Valor,Resultado,Inferido).

inferir_propiedad([_|B],Buscar,Propiedades,Resultado,Inferido):-
	inferir_propiedad(B,Buscar,Propiedades,Resultado,Inferido).

inferencia_nueva_propiedad(si,Valor,Valor,_).
inferencia_nueva_propiedad(no,_,Valor,Valor).

prepar_proceso_inferencia([],_,_,Inferido,Inferido).

prepar_proceso_inferencia(Preferencias,Buscar,Propiedades,Resultado,desconocido):-
	extraer_preferencias_por_propiedad(Preferencias,Buscar,PreferenciasFiltradas),
	ordenar_preferencias(PreferenciasFiltradas,PreferenciasOrdenadas),
	inferir_propiedad(PreferenciasOrdenadas,Buscar,Propiedades,Resultado,desconocido).

prepar_proceso_inferencia(_,_,_,Inferido,Inferido).

ordenar_preferencias([],[]).

ordenar_preferencias(Preferencias,Ordenadas):-
	orden_bur(Preferencias,EnOrden),
	reversa(EnOrden,Ordenadas).

concatener(A,B,X):-
	append(A,B,X).

reversa([],[]).

reversa([X|L1],M):-
	reversa(L1,Demas),
	concatener(Demas,[X],M).

orden_bur([Ant=>>Prop=>(Val,X)],[Ant=>>Prop=>(Val,X)]).

orden_bur(L,Lord):-  
    burbuja(L,L1),
    orden_bur(L1,Lord).

orden_bur(X,X).

burbuja([],[]). 
burbuja([Ant=>>Prop=>(Val,C)],[Ant=>>Prop=>(Val,C)]).

burbuja([Ant2=>>Prop2=>(Val2,X),Ant3=>>Prop3=>(Val3,Y)|L],Lburb):-  
   X<Y,  
   burbuja([Ant2=>>Prop2=>(Val2,X)|L],L1),  
   Lburb = [Ant3=>>Prop3=>(Val3,Y)|L1]. 

compara_preferencias([],_,_).

compara_preferencias([A|[]],Prop,Desicion):-
	comparar_propiedad_preferencia(A,Prop,Desicion2),
	decidir(Desicion2,si,Desicion).

compara_preferencias([A|B],Prop,Desicion):-
	comparar_propiedad_preferencia(A,Prop,Desicion2),
	comparar_propiedad_preferencia(B,Prop,Desicion3),
	decidir(Desicion2,Desicion3,Desicion).

decidir(si,si,si).
decidir(_,_,no).

comparar_propiedad_preferencia(_,[],no).

comparar_propiedad_preferencia(Propiedad=>(Valor,_),[Propiedad=>(Valor,_)|_],si).
comparar_propiedad_preferencia(Propiedad=>(Valor,_),[Propiedad=>(Valor2,_)|_],no).

comparar_propiedad_preferencia([Propiedad=>(Valor,_)],[Propiedad=>(Valor,_)|_],si).
comparar_propiedad_preferencia([Propiedad=>(Valor,_)],[Propiedad=>(Valor2,_)|_],no).

comparar_propiedad_preferencia(Buscar,[_|T],R):-
	comparar_propiedad_preferencia(Buscar,T,R).

extraer_preferencias_por_propiedad([],_,[]).

extraer_preferencias_por_propiedad([Ant=>>Buscar=>(Val,C)|Resto],Buscar,L):-
	extraer_preferencias_por_propiedad(Resto,Buscar,L1),
	append([Ant=>>Buscar=>(Val,C)],L1,L).

extraer_preferencias_por_propiedad([_|B],Buscar,L):-
	extraer_preferencias_por_propiedad(B,Buscar,L).


%si no se encuentra la propiedad se dice que no
buscar_propiedad(_,[],1000,desconocido).

%propiedades que son positivas
buscar_propiedad(Propiedad, [Propiedad=>(Valor,Peso)|_],Peso,Valor).
	%append([],Valor,R).

buscar_propiedad(Propiedad,[_|T],Peso,Valor):-
	buscar_propiedad(Propiedad,T,Peso,Valor).

obtener_propiedades_clase(_,[],[]).
obtener_propiedades_clase(Clase,[class(Clase,_,[[A|B]|_],_,_)|_], [A|B]).
obtener_propiedades_clase(Clase,[class(Clase,_,[[A|B]],_,_)|_], [A|B]).

%se llama recurisavamente hasta encontrar la clase correspondiente y obtener las propiedadades
obtener_propiedades_clase(Clase,[_|T],Propiedades):-
	obtener_propiedades_clase(Clase,T,Propiedades).

obtener_preferencias_clase(_,[],[]).
obtener_preferencias_clase(Clase,[class(Clase,_,[_|[A]],_,_)|_],A).
obtener_preferencias_clase(Clase,[class(Clase,_,[_|[A]],_,_)|_],A).

obtener_preferencias_clase(Clase,[_|T], Preferencias):-
	obtener_preferencias_clase(Clase,T,Preferencias).

obtener_hijos(Padre,[class(Hija,Padre,_,_,_)|Resto],Hijos):-
	obtener_hijos(Padre,Resto,Hermanos),
	append([Hija],Hermanos,Hijos).

obtener_hijos(Padre,[_|B],Hijo):-
	obtener_hijos(Padre,B,Hijo).

obtener_hijos(_,[],[]).

bajar_por_hijos_propiedad(Padre,[],PropiedadBuscar,PropiedadesHerencia,KB,Extension,PreferenciasHerencia):-
	obtener_propiedades_individuos_clase(Padre,PropiedadBuscar,PropiedadesHerencia,KB,Extension,PreferenciasHerencia).

bajar_por_hijos_propiedad(_,Hijos,PropiedadBuscar,PropiedadesHerencia,KB,Extension,PreferenciasHerencia):-
	recorre_hijos_propiedad(Hijos,PropiedadBuscar,PropiedadesHerencia,KB,Extension,PreferenciasHerencia).

recorre_hijos_propiedad([P|H],PropiedadBuscar,KB,Propiedades,Extension,PreferenciasHerencia):-
	obtener_extension_propiedad(P,PropiedadBuscar,KB,Propiedades,ExtensionNueva,PreferenciasHerencia),
	recorre_hijos_propiedad(H,PropiedadBuscar,KB,Propiedades,ExtensionNueva2,PreferenciasHerencia),
	append(ExtensionNueva2,ExtensionNueva,Extension).

recorre_hijos_propiedad([],_,_,_,[],_).
recorre_hijos_propiedad(_,_,[],_,[],_).

%--------------------------------------------------------------------------------------------------------

%Extensi贸n de una relaci贸n-------------------------------------------------------------------------------

extension_relacion(Relacion,KB,Extension):-
	obtener_extension_relacion(top,Relacion,[],[],KB,Extension,KB), imprime_lista_resultados(Extension).

%predicado que permite obtener la extensi贸n completa de una relacion en todo el 谩rbol
%se obtienen los hijos de la clase
%se obtiene la lista de relaciones de la clase padre
%se concantenan las relaciones padre con las relaciones heredadas
%se elije el primer hijo y se busca si tiene la relacion dada
obtener_extension_relacion(ClaseActual,RelacionBuscar,RelacionesHeredadas,PreferenciasHeredadas,KB,Extension,RespaldoKB):-
	obtener_hijos(ClaseActual,KB,Hijos),											
	obtener_relaciones_clase(ClaseActual,KB,RelacionesPadre),
	obtener_preferencias_relaciones(ClaseActual,KB,PreferenciasHerencia),
	append(PreferenciasHerencia,PreferenciasHeredadas,Preferencias),									
	append(RelacionesPadre,RelacionesHeredadas,RelacionesHerencia),			
	bajar_por_hijos_relacion(ClaseActual,Hijos,RelacionBuscar,RelacionesHerencia,Preferencias,KB,Extension,RespaldoKB). 

obtener_extension_relacion([],_,_,_,_,[],_).

obtener_relaciones_individuos_clase(Clase,_,_,[class(Clase,_,_,_,[])|_],[],_).

obtener_relaciones_individuos_clase(Clase,RelacionBuscar,RelacionesHeredadas,Preferencias,[class(Clase,_,_,_,[[id=>Nombres,_,RelprefIndividuos]|NombresRestantes])|Resto],Extension,RespaldoKB):-
	extraer_todas_relaciones_individuo(RelprefIndividuos,RelacionesHeredadas,Preferencias,RelacionesInferidas,RespaldoKB),
	obtener_relaciones_individuos_clase(Clase,RelacionBuscar,RelacionesHeredadas,Preferencias,[class(Clase,_,_,_,NombresRestantes)|Resto],ExtensionDemasIndividuos,RespaldoKB),
	verificar_existencia_propiedad(RelacionBuscar,RelacionesInferidas,ResultadoBusqueda,Nombres),
	append([ResultadoBusqueda],ExtensionDemasIndividuos,Extension).

obtener_relaciones_individuos_clase(Clase,RelacionBuscar,RelacionesHeredadas,Preferencias,[class(Clase,_,_,_,[[id=>[Nombre|RestoNombres],_,[]]|Otros])|_],Extension,RespaldoKB):-
	buscar_relacion(RelacionBuscar,RelacionesHeredadas,ValorPorDefecto,RespaldoKB),
	prepar_proceso_inferencia_relacion(Preferencias,RelacionBuscar,RelacionesHeredadas,ValorInferido,ValorPorDefecto),
	append([Nombre|RestoNombres],[ValorInferido],Val1),
	extraer_relaciones_individuos(RelacionBuscar,RelacionesHeredadas,Preferencias,Otros,DemasValores,RespaldoKB),
	append([Val1],DemasValores,Extension).

obtener_relaciones_individuos_clase(Clase,RelacionBuscar,RelacionesHeredadas,Preferencias,[class(Clase,_,_,_,[[id=>[Nombre|RestoNombres],_,[]]|[]])|_],Extension,RespaldoKB):-
	buscar_relacion(RelacionBuscar,RelacionesHeredadas,ValorPorDefecto,RespaldoKB),
	prepar_proceso_inferencia_relacion(Preferencias,RelacionBuscar,RelacionesHeredadas,ValorInferido,ValorPorDefecto),
	append([Nombre|RestoNombres],[ValorInferido],Extension).

obtener_relaciones_individuos_clase(Clase,RelacionBuscar,RelacionesHeredadas,Preferencias,[_|T],Extension,RespaldoKB):-
	obtener_relaciones_individuos_clase(Clase,RelacionBuscar,RelacionesHeredadas,Preferencias,T,Extension,RespaldoKB).

obtener_relaciones_individuos_clase(_,_,_,_,[],[],_).

prepar_proceso_inferencia_relacion([],_,_,Inferido,Inferido).

prepar_proceso_inferencia_relacion(Preferencias,Buscar,Relaciones,Resultado,desconocido):-
	extraer_preferencias_por_relacion(Preferencias,Buscar,PreferenciasFiltradas),
	ordenar_preferencias(PreferenciasFiltradas,PreferenciasOrdenadas),
	inferir_relacion(PreferenciasOrdenadas,Buscar,Relaciones,Resultado,desconocido).

prepar_proceso_inferencia_relacion(_,_,_,Inferido,Inferido).

inferir_relacion([],_,_,A,A).

inferir_relacion([Antecedentes=>>Buscar=>(Valor,Peso)|_],Buscar,Relaciones,Resultado,Inferido):-
	compara_preferencias(Antecedentes,Relaciones,Desicion),
	inferencia_nueva_propiedad(Desicion,Valor,Resultado,Inferido).

inferir_relacion([_|B],Buscar,Relaciones,Resultado,Inferido):-
	inferir_relacion(B,Buscar,Relaciones,Resultado,Inferido).

obtener_preferencias_relaciones(_,[],[]).
obtener_preferencias_relaciones(Clase,[class(Clase,_,_,[_|[A]],_)|_],A).

obtener_preferencias_relaciones(Clase,[_|T], Preferencias):-
	obtener_preferencias_relaciones(Clase,T,Preferencias).

extraer_preferencias_por_relacion([],_,[]).

extraer_preferencias_por_relacion([Ant=>>Buscar=>(Val,C)|Resto],Buscar,L):-
	extraer_preferencias_por_relacion(Resto,Buscar,L1),
	append([Ant=>>Buscar=>(Val,C)],L1,L).

extraer_preferencias_por_relacion([_|B],Buscar,L):-
	extraer_preferencias_por_relacion(B,Buscar,L).

extraer_relaciones_individuos(RelacionBuscar,RelacionesHeredadas,Preferencias,[[id=>[Nombre|RestoNombres],_,[A|B]]|Resto],Extension,RespaldoKB):-
	append([A|B],RelacionesHeredadas,RelacionesCompletas),
	buscar_relacion(RelacionBuscar,RelacionesCompletas,ValorPorDefecto,RespaldoKB),
	prepar_proceso_inferencia_relacion(Preferencias,RelacionBuscar,RelacionesCompletas,ValorInferido,ValorPorDefecto),
	extraer_relaciones_individuos(RelacionBuscar,RelacionesHeredadas,Preferencias,Resto,RestoIndividuos,RespaldoKB),
	append([Nombre|RestoNombres],[ValorInferido],Ind1),
	append([Ind1],RestoIndividuos,Extension).

extraer_relaciones_individuos(RelacionBuscar,RelacionesHeredadas,Preferencias,[[id=>[Nombre|RestoNombres],_,[]]|Resto],Extension,RespaldoKB):-
	buscar_relacion(RelacionBuscar,RelacionesHeredadas,ValorPorDefecto,RespaldoKB),
	prepar_proceso_inferencia_relacion(Preferencias,RelacionBuscar,RelacionesHeredadas,ValorInferido,ValorPorDefecto),
	extraer_relaciones_individuos(RelacionBuscar,RelacionesHeredadas,Preferencias,Resto,RestoIndividuos,RespaldoKB),
	append([Nombre|RestoNombres],[ValorInferido],Ind1),
	append(Ind1,RestoIndividuos,Extension).

extraer_relaciones_individuos(RelacionBuscar,RelacionesHeredadas,Preferencias,[_|Resto],Extension,RespaldoKB):-
	extraer_relaciones_individuos(RelacionBuscar,RelacionesHeredadas,Preferencias,Resto,Extension,RespaldoKB).

extraer_relaciones_individuos(_,_,_,[],[],_).

%si no se encuentra la propiedad se dice que no
buscar_relacion(_,[],desconocido,_).

%propiedades que son positivas
buscar_relacion(Relacion, [Relacion=>(Individuo,_)|_],Valor,RespaldoKB):-
	individuos_especificos_de_clase(Individuo,RespaldoKB,Valor).


%si no unifica en la relaci贸n entonces se siguen buscando en la relaciones
buscar_relacion(Relacion,[_|T],Valor,KB):-
	buscar_relacion(Relacion,T,Valor,KB).

obtener_relaciones_clase(_,[],[]).
obtener_relaciones_clase(Clase,[class(Clase,_,_,[[A|B]|_],_)|_], [A|B]).
obtener_relaciones_clase(Clase,[class(Clase,_,_,[[A|B]],_)|_], [A|B]).

%se llama recurisavamente hasta encontrar la clase correspondiente y obtener las propiedadades
obtener_relaciones_clase(Clase,[_|T],Relaciones):-
	obtener_relaciones_clase(Clase,T,Relaciones).

bajar_por_hijos_relacion(Padre,[],RelacionBuscar,RelacionesHerencia,Preferencias,KB,Extension,RespaldoKB):-
	obtener_relaciones_individuos_clase(Padre,RelacionBuscar,RelacionesHerencia,Preferencias,KB,Extension,RespaldoKB).

bajar_por_hijos_relacion(_,Hijos,RelacionBuscar,RelacionesHerencia,Preferencias,KB,Extension,RespaldoKB):-
	recorre_hijos_relacion(Hijos,RelacionBuscar,RelacionesHerencia,Preferencias,KB,Extension,RespaldoKB).

recorre_hijos_relacion([P|H],RelacionBuscar,Relaciones,Preferencias,KB,Extension,RespaldoKB):-
	obtener_extension_relacion(P,RelacionBuscar,Relaciones,Preferencias,KB,ExtensionNueva,RespaldoKB),
	recorre_hijos_relacion(H,RelacionBuscar,Relaciones,Preferencias,KB,ExtensionNueva2,RespaldoKB),
	append(ExtensionNueva2,ExtensionNueva,Extension).

recorre_hijos_relacion([],_,_,_,_,[],_).
recorre_hijos_relacion(_,_,[],_,_,[],_).

%--------------------------------------------------------------------------------------------------------

%predicados para  obtener las clases a las que pertenece un individuo -----------------------------------

clases_pertenecientes_individuo(Individuo,KB,Pertenece):-
	obtener_clases_pertenecientes_individuo(top,Individuo,KB,Pertenece,[]).

obtener_clases_pertenecientes_individuo(Padre,IndividuoBuscar,KB,Pertenece,Pila):-
	obtener_hijos(Padre,KB,Hijos),
	append([Padre],Pila,Pila2),
	bajar_por_hijos_clase_pertenecen(Padre,IndividuoBuscar,Hijos,KB,Pertenece,Pila2).

bajar_por_hijos_clase_pertenecen(Padre,IndividuoBuscar,[A|B],KB,Pertenece,Pila):-
	obtener_clases_pertenecientes_individuo(A,IndividuoBuscar,KB,Pertenece,Pila),
	bajar_por_hijos_clase_pertenecen(Padre,IndividuoBuscar,B,KB,Pertenece,Pila).

bajar_por_hijos_clase_pertenecen(Padre,IndividuoBuscar,[],KB,Pertenece,Pila):-
	obtener_clases_pertenecientes_individuo_nivel(Padre,IndividuoBuscar,KB,Pertenece,Pila).

%predicado base que detiene recursividad
bajar_por_hijos_clase_pertenecen(_,_,[],[],_,[]).

%una vez que encuentra la clase revisa si tiene individios y busca el deseado
obtener_clases_pertenecientes_individuo_nivel(Clase,IndividuoBuscar,[class(Clase,_,_,_,[A|B])|_],Pertenece,Pila):-
	buscar_individuo(IndividuoBuscar,[A|B],Pertenece,Pila).

%itera por toda la lista de KB hasta encontrar la clase deseada
obtener_clases_pertenecientes_individuo_nivel(Clase,IndividuoBuscar,[_|T],Pertenece,Pila):-
	obtener_clases_pertenecientes_individuo_nivel(Clase,IndividuoBuscar,T,Pertenece,Pila).

%cuando se encuentra el individuo, se unifica la pila con el arreglo respuesta
buscar_individuo(IndividuoBuscar,[[id=>IndividuoBuscar,_,_]|_],Pertenece,Pertenece):-!.

%este predicado permite buscar en toda la lista de individios
buscar_individuo(IndividuoBuscar,[_|B],Pertenece,Pila):-
	buscar_individuo(IndividuoBuscar,B,Pertenece,Pila).

%predicado base que detiene la busqueda
buscar_individuo(_,[],[],_).

buscar_individuo(_,[],_,_).

%predicado base que detiene la recursividad
obtener_clases_pertenecientes_individuo_nivel(_,_,[],[],_).
obtener_clases_pertenecientes_individuo_nivel(_,_,[],_,_).

%--------------------------------------------------------------------------------------------------------

% predicados para obtener todas las propiedades de un objeto --------------------------------------------

%predicado que se encarga de obtener todas las propiedades de un objeto especifico
obtener_propiedades_completas_objeto(Individuo,KB,Resultado):-
	obtener_propiedades_completas_por_objeto(top,KB,Individuo,[],[],Resultado). %llama al predicado principal que recorre el arbol recursivamente

%predicado para obtener 
obtener_propiedades_completas_por_objeto(ClaseActual,KB,IndividuoBuscar,PropiedadesHeredadas,PreferenciasHeredadas,Resultado):-
	obtener_hijos(ClaseActual,KB,Hijos), 								 %obtiene los hijos de esta clase actual
	obtener_propiedades_clase(ClaseActual,KB,PropiedadesClase), 		 % obtiene las propiedades de la clase actual
	obtener_preferencias_clase(ClaseActual,KB,PreferenciasClase), 	 	 % obtiene las preferencias de la clase actual
	append(PropiedadesClase,PropiedadesHeredadas,PropiedadesHerencia),	 % concatena las propiedades heredadas y las propiedades propias de la clase
	decide_heredar_preferencias(PreferenciasClase,PreferenciasHeredadas,PreferenciasHerencia),
	iterar_por_hijos_propiedades_completas(ClaseActual,Hijos,KB,IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado).

% este predicado unifica cuando ya no se tienen hijos entonces se tiene que buscar el objeto especifico
iterar_por_hijos_propiedades_completas(ClaseActual,[],KB,IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado):-
	encontrar_objeto_especifico_por_clase(ClaseActual,KB,IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado).

% este predicado unifica cuando aun se tienen que visitar mas clases
iterar_por_hijos_propiedades_completas(_,Hijos,KB,IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado):-
	recorrer_arbol_propiedades_completos_objetos(Hijos,KB,IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado).

%en este predicado se unifica cuando se encuentra la clase actual
encontrar_objeto_especifico_por_clase(ClaseActual,[class(ClaseActual,_,_,_,[[id=>Individios,PropInd,_]|Otros])|_],IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado):-
	iterar_por_lista_propiedades_de_individuos([[id=>Individios,PropInd,_]|Otros],IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado).

% si no se unifica en la claseactual se sigue buscando en el resto de la lista
encontrar_objeto_especifico_por_clase(ClaseActual,[_|B],IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado):-
	encontrar_objeto_especifico_por_clase(ClaseActual,B,IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado).

% predicado base que detiene la recursividad, ya no sigue buscando mas adentro arbol
encontrar_objeto_especifico_por_clase(ClaseActual,[],_,_,_,[]).

iterar_por_lista_propiedades_de_individuos([],_,_,_,[]).

iterar_por_lista_propiedades_de_individuos([[id=>ListaIndividuoBuscar,PropInd,_]|Demas],IndividuoBuscar,PropHerencia,PrefHerencia,R):-
	buscar_propiedad_individuo_lista(ListaIndividuoBuscar,PropInd,IndividuoBuscar,PropHerencia,PrefHerencia,R),
	iterar_por_lista_propiedades_de_individuos(Demas,IndividuoBuscar,PropHerencia ,PrefHerencia,R).	

iterar_por_lista_propiedades_de_individuos(_,_,_,_,R).

buscar_propiedad_individuo_lista([],_,_,_,_,_).

buscar_propiedad_individuo_lista([IndividuoBuscar|Resto],PropIndi,IndividuoBuscar,PropHerencia ,PrefHerencia,R):-
	extraer_todas_propiedades_individuo(PropIndi,PropHerencia ,PrefHerencia,R).

buscar_propiedad_individuo_lista([_|Resto],PropIndi,IndividuoBuscar,PropHerencia ,PrefHerencia,R):-
	buscar_propiedad_individuo_lista(Resto,PropIndi,IndividuoBuscar,PropHerencia ,PrefHerencia,R).

%predicado base que detiene la recursividad
%extraer_todas_propiedades_individuo([],_,_,[]).

%  precidado que permite obtener todas las propiedades de un individuo, las propias y las inferidas ----------------
extraer_todas_propiedades_individuo([PropIndI|[PrefIndI]],PropHerencia,PrefHerencia,Resultado):-
	obtener_nuevas_propiedades_individuo(PropIndI,PrefIndI,PropHerencia,PrefHerencia,Resultado).

extraer_todas_propiedades_individuo([PropIndI|[]],PropHerencia,PrefHerencia,Resultado):-
	obtener_nuevas_propiedades_individuo(PropIndI,[],PropHerencia,PrefHerencia,Resultado).

extraer_todas_propiedades_individuo([[]|[PrefIndI]],PropHerencia,PrefHerencia,Resultado):-
	obtener_nuevas_propiedades_individuo([],PrefIndI,PropHerencia,PrefHerencia,Resultado).

extraer_todas_propiedades_individuo([],PropHerencia,PrefHerencia,Resultado):-
	obtener_nuevas_propiedades_individuo([],[],PropHerencia,PrefHerencia,Resultado).

obtener_nuevas_propiedades_individuo(PropIndI,PrefIndI,PropHerencia,PrefHerencia,Resultado):-
	%se concatenan las preferencias de los individios con las heredadas
	decide_heredar_preferencias(PrefIndI,PrefHerencia,PrefIndiHeren),

	%en esta parte se acomodan las preferencias en orden de implicaci贸n
	ordenar_preferencias_por_implicacion(PrefIndiHeren,PrefIndiHeren,PreferenciasOrdendas),

	% en esta parte se concatenan las preferencias en orden con las heredadas
	append(PreferenciasOrdendas,PrefIndiHeren,OrdenadasPorPreferencia), 

	%aqui se encarga de eliminar las propiedades repetidas, se da prioridad a las del individuo	
	recorrer_propiedades_heredadas(PropHerencia,PropIndI,Filtradas),	

	%aqui se concantenan las propiedades propias del individuo con las propiedades heredadas
	append(PropIndI,Filtradas,PropiedadesCompletas),
	
	%reversea la lista para poder realizar correctamente las inferencias
	reversa(OrdenadasPorPreferencia,OrdenadasPorPreferenciaInvertidas),

	%inicia con el proceso de inferencia multiple
	iniciar_inferencias_multiples(OrdenadasPorPreferenciaInvertidas,PropiedadesCompletas,Inferido,OrdenadasPorPreferenciaInvertidas),

	%concatena la lista de propiedades del individuo con las inferidas
	append(PropIndI,Inferido,Resultado).

ordenar_preferencias_por_implicacion([],_,[]).

ordenar_preferencias_por_implicacion(P,_,P).

ordenar_preferencias_por_implicacion([Antecedentes=>>Consecuente=>(Valor,Peso)|D],Pref,R):-
	iterar_implicaciones_propiedades(Antecedentes,Pref,R2),
	ordenar_preferencias_por_implicacion(D,Pref,R3),
	append(R2,R3,R).

iterar_implicaciones_propiedades([],_,[]).

iterar_implicaciones_propiedades([Prop=>(Valor,Peso)|D],Pref,R):-
	buscar_propiedad_consecuente(Prop,Pref,R2),
	iterar_implicaciones_propiedades(D,Pref,R3),
	append(R2,R3,R).

buscar_propiedad_consecuente(Consecuente,[Antecedentes=>>Consecuente=>(Valor,Peso)|_],R):-
	R = [Antecedentes=>>Consecuente=>(Valor,Peso)].

buscar_propiedad_consecuente(Consecuente,[_|B],R):-
	buscar_propiedad_consecuente(Consecuente,B,R).

%caso base que detiene la recursividad
buscar_propiedad_consecuente(_,[],[]).

obtener_propiedades_mas_especificas(PropiedadesPropias,PropiedadesHeredadas,Filtradas).

%caso base que detiene la recursividad
recorrer_propiedades_heredadas([],_,[]).

%predicado que permite obtener las propiedades heredades que no se repiten en las propiedades propias
recorrer_propiedades_heredadas([Propiedad=>(Valor,Pes)|B],PropIndI,Resultado):-	
	recorrer_propiedades_heredadas(B,PropIndI,Resultado2),
	buscar_propiedad(Propiedad,PropIndI,_,X),
	verificar_resultado_repetido(X,Propiedad=>(Valor,Pes),PropIndI,Resultado).

%predicado que permite verificar que efectivamente no este la propiedad repetida
verificar_resultado_repetido(desconocido,Propiedad=>(Valor,Pes),Resultado2,Resultado):-
	append([Propiedad=>(Valor,Pes)],Resultado2,Resultado).

%este predicado se ejecuta si ya existe la propiedad
verificar_resultado_repetido(_,_,Resultado2,Resultado2).

iniciar_inferencias_multiples([],A,A,[]).

%caso base que detiene la recursividad
iniciar_inferencias_multiples([],_,[],_).

iniciar_inferencias_multiples([Antecedentes=>>Propiedad=>(Valor,Peso)|Resto],Propiedades,PropiedadesInferidas,Preferencias):-
	iniciar_inferencias_multiples(Resto,Propiedades,PropiedadesInferidas2,Preferencias), % se llama recursivamente hasta encontrar el caso base
	buscar_propiedad(Propiedad,PropiedadesInferidas2,_,X), %primero verificamos que no exista ya la propiedad inferida en las propiedades inferidas
	append(Propiedades,PropiedadesInferidas2,Completas),
	validar_no_existencia(X,Propiedad,Preferencias,Completas,Inferir),
	verificar_inferencia(Inferir,Propiedad,Peso,ResultadoInferido),
	append(ResultadoInferido,PropiedadesInferidas2,PropiedadesInferidas).
	
verificar_inferencia(desconocido,_,_,[]).
verificar_inferencia([],_,_,[]).
verificar_inferencia(Valor,Propiedad,Peso,Resultado):-
	Resultado = [Propiedad=>(Valor,0)].

validar_no_existencia(desconocido,Propiedad,Preferencias,PropiedadesCompletas,Inferido):-
	extraer_preferencias_por_propiedad(Preferencias,Propiedad,Filtradas),
	ordenar_preferencias(Filtradas,PreferenciasOrdenadas),
	inferir_propiedad(PreferenciasOrdenadas,Propiedad,PropiedadesCompletas,Inferido,desconocido).

validar_no_existencia(_,_,_,_,[]).


% predicado que recorre el resto de las clase 谩rbol
recorrer_arbol_propiedades_completos_objetos([A|B],KB,IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,Resultado):-
	obtener_propiedades_completas_por_objeto(A,KB,IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,ResultadoA),
	recorrer_arbol_propiedades_completos_objetos(B,KB,IndividuoBuscar,PropiedadesHerencia,PreferenciasHerencia,ResultadoB),
	append(ResultadoA,ResultadoB,Resultado).

% predicado case base que detiene la recursividad
recorrer_arbol_propiedades_completos_objetos([],_,_,_,_,[]).

%--------------------------------------------------------------------------------------------------------

% predicados para obtener todas las propiedades de una clase --------------------------------------------

obtener_propiedades_completas_clase(ClaseBuscar,KB,Propiedades):-
	buscar_propiedades_clase(top,ClaseBuscar,KB,[],Propiedades).

buscar_propiedades_clase(ClaseBuscar,ClaseBuscar,KB,PropiedadesHeredadas,Propiedades):-
	obtener_propiedades_clase(ClaseBuscar,KB,PropiedadesClase),
	append(PropiedadesClase,PropiedadesHeredadas,Propiedades).

buscar_propiedades_clase(ClaseActual,ClaseBuscar,KB,PropiedadesHeredadas,Propiedades):-
	obtener_hijos(ClaseActual,KB,Hijos),
	obtener_propiedades_clase(ClaseActual,KB,PropiedadesClase),
	append(PropiedadesClase,PropiedadesHeredadas,PropiedadesHerencia),
	bajar_por_hijos_propiedades_clase(Hijos,ClaseBuscar,KB,PropiedadesHerencia,Propiedades).

%si ya no tiene hijos se detiene
bajar_por_hijos_propiedades_clase([],ClaseBuscar,KB,PropiedadesHerencia,Propiedades).

bajar_por_hijos_propiedades_clase(Hijos,ClaseBuscar,KB,PropiedadesHerencia,Propiedades):-
	recorre_hijos_propiedad_clase(Hijos,ClaseBuscar,KB,PropiedadesHerencia,Propiedades).

recorre_hijos_propiedad_clase([P|H],ClaseBuscar,KB,PropiedadesHeredadas,Propiedades):-
	buscar_propiedades_clase(P,ClaseBuscar,KB,PropiedadesHeredadas,Propiedades2),
	recorre_hijos_propiedad_clase(H,ClaseBuscar,KB,PropiedadesHeredadas,Propiedades3),
	append(Propiedades2,Propiedades3,Propiedades).

recorre_hijos_propiedad_clase([],_,_,_,[]).
recorre_hijos_propiedad_clase(_,_,[],_,[]).

%--------------------------------------------------------------------------------------------------------

% predicados para obtener todas las relaciones de una clase ---------------------------------------------

obtener_relaciones_completas_clase(ClaseBuscar,KB,Relaciones):-
	buscar_relaciones_clase(top,ClaseBuscar,KB,[],Relaciones).

buscar_relaciones_clase(ClaseBuscar,ClaseBuscar,KB,RelacionesHeredadas,Relaciones):-
	obtener_relaciones_clase(ClaseBuscar,KB,RelacionesClase),
	append(RelacionesClase,RelacionesHeredadas,Relaciones).

buscar_relaciones_clase(ClaseActual,ClaseBuscar,KB,RelacionesHeredadas,Relaciones):-
	obtener_hijos(ClaseActual,KB,Hijos),
	obtener_relaciones_clase(ClaseActual,KB,RelacionesClase),
	append(RelacionesClase,RelacionesHeredadas,RelacionesHerencia),
	bajar_por_hijos_relaciones_clase(Hijos,ClaseBuscar,KB,RelacionesHerencia,Relaciones).

%si ya no tiene hijos se detiene
bajar_por_hijos_relaciones_clase([],ClaseBuscar,KB,RelacionesHerencia,Relaciones).

bajar_por_hijos_relaciones_clase(Hijos,ClaseBuscar,KB,RelacionesHerencia,Relaciones):-
	recorre_hijos_relacion_clase(Hijos,ClaseBuscar,KB,RelacionesHerencia,Relaciones).

recorre_hijos_relacion_clase([P|H],ClaseBuscar,KB,RelacionesHeredadas,Relaciones):-
	buscar_relaciones_clase(P,ClaseBuscar,KB,RelacionesHeredadas,Propiedades2),
	recorre_hijos_relacion_clase(H,ClaseBuscar,KB,RelacionesHeredadas,Propiedades3),
	append(Propiedades2,Propiedades3,Relaciones).

recorre_hijos_relacion_clase([],_,_,_,[]).
recorre_hijos_relacion_clase(_,_,[],_,[]).

%--------------------------------------------------------------------------------------------------------


% predicados para obtener todas las relaciones de un objeto ---------------------------------------------

obtener_relaciones_completas_objeto(Individuo,KB,Resultado):-
	obtener_relaciones_completas_por_objeto(top,KB,Individuo,[],[],Resultado,KB).

%predicado para obtener 
obtener_relaciones_completas_por_objeto(ClaseActual,KB,IndividuoBuscar,RelacionesHeredadas,PreferenciasHeredadas,Resultado,KB):-
	obtener_hijos(ClaseActual,KB,Hijos), %obtiene los hijos de esta clase actual
	obtener_relaciones_clase(ClaseActual,KB,RelacionesClase), 		 % obtiene las relaciones de la clase actual
	obtener_preferencias_relaciones(ClaseActual,KB,PreferenciasClase), 	 % obtiene las preferencias de la clase actual
	append(RelacionesClase,RelacionesHeredadas,RelacionesHerencia),% concatena las relaciones heredadas y las relaciones propias de la clase
	decide_heredar_preferencias(PreferenciasClase,PreferenciasHeredadas,PreferenciasHerencia),
	iterar_por_hijos_relaciones_completas(ClaseActual,Hijos,KB,IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB).

% este predicado unifica cuando ya no se tienen hijos entonces se tiene que buscar el objeto especifico
iterar_por_hijos_relaciones_completas(ClaseActual,[],KB,IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB):-
	encontrar_objeto_especifico_por_clase_relacion(ClaseActual,KB,IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB).

% este predicado unifica cuando aun se tienen que visitar mas clases
iterar_por_hijos_relaciones_completas(_,Hijos,KB,IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB):-
	recorrer_arbol_relaciones_completos_objetos(Hijos,KB,IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB).

%en este predicado se unifica cuando se encuentra la clase actual
encontrar_objeto_especifico_por_clase_relacion(ClaseActual,[class(ClaseActual,_,_,_,[[id=>Individios,_,RelInd]|Otros])|_],IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB):-
	iterar_por_lista_relaciones_de_indidividuos([[id=>Individios,_,RelInd]|Otros],IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB).

encontrar_objeto_especifico_por_clase_relacion(ClaseActual,[class(ClaseActual,_,_,_,[[id=>Individios,_,[]]|Otros])|_],IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB):-
	iterar_por_lista_relaciones_de_indidividuos(IndividuoBuscar,[[id=>Individios,_,[]]|Otros],IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB).

encontrar_objeto_especifico_por_clase_relacion(ClaseActual,[class(ClaseActual,_,_,_,[[id=>Individios,_,[]]|[]])|_],IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB):-
	iterar_por_lista_relaciones_de_indidividuos(IndividuoBuscar,[[id=>Individios,_,[]]|[]],IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB).

% si no se unifica en la claseactual se sigue buscando en el resto de la lista
encontrar_objeto_especifico_por_clase_relacion(ClaseActual,[_|B],IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB):-
	encontrar_objeto_especifico_por_clase_relacion(ClaseActual,B,IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB).

% predicado base que detiene la recursividad, ya no sigue buscando mas adentro arbol
encontrar_objeto_especifico_por_clase_relacion(ClaseActual,[],_,_,_,[],_).

iterar_por_lista_relaciones_de_indidividuos([],_,_,_,[],_).

iterar_por_lista_relaciones_de_indidividuos([[id=>ListaIndividuoBuscar,_,RelInd]|Demas],IndividuoBuscar,RelHerencia,PrefHerencia,R,KB):-
	buscar_relacion_individuo_lista(ListaIndividuoBuscar,RelInd,IndividuoBuscar,RelHerencia,PrefHerencia,R,KB),
	iterar_por_lista_relaciones_de_indidividuos(Demas,IndividuoBuscar,RelHerencia,PrefHerencia,R,KB).

iterar_por_lista_relaciones_de_indidividuos(_,_,_,_,R,_).

buscar_relacion_individuo_lista([],_,_,_,_,_,_).

buscar_relacion_individuo_lista([IndividuoBuscar|Resto],RelIndi, IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB):-
	extraer_todas_relaciones_individuo(RelIndi,RelacionesHerencia,PreferenciasHerencia,Resultado,KB).

buscar_relacion_individuo_lista([_|Resto],RelIndi, IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB):-
	buscar_relacion_individuo_lista(Resto,RelIndi, IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB).

%predicado base que detiene la recursividad
%extraer_todas_relaciones_individuo(_,[],_,_,[],_).

extraer_todas_relaciones_individuo([RelIndi|PrefIndi],RelHerencia,PrefHerencia,Resultado,KB):-
	obtener_nuevas_relaciones_inidividuo(RelIndi,PrefIndi,RelHerencia,PrefHerencia,Resultado,KB).

extraer_todas_relaciones_individuo([RelIndi|[]],RelHerencia,PrefHerencia,Resultado,KB):-
	obtener_nuevas_relaciones_inidividuo(RelIndi,[],RelHerencia,PrefHerencia,Resultado,KB).

extraer_todas_relaciones_individuo([[]|PrefIndi],RelHerencia,PrefHerencia,Resultado,KB):-
	obtener_nuevas_relaciones_inidividuo([],PrefIndi,RelHerencia,PrefHerencia,Resultado,KB).

extraer_todas_relaciones_individuo([],RelHerencia,PrefHerencia,Resultado,KB):-
	obtener_nuevas_relaciones_inidividuo([],[],RelHerencia,PrefHerencia,Resultado,KB).

obtener_nuevas_relaciones_inidividuo(RelInd,PrefIndI,RelHerencia,PrefHerencia,Resultado,KB):-
	decide_heredar_preferencias(PrefIndI,PrefHerencia,PrefIndiHeren),
	ordenar_preferencias_por_implicacion(PrefIndiHeren,PrefIndiHeren,PreferenciasOrdendas),
	append(PreferenciasOrdendas,PrefIndiHeren,OrdenadasPorPreferencia),
	recorrer_relaciones_heredadas(RelHerencia,RelInd,Filtradas,KB),
	append(RelInd,Filtradas,RelacionesCompletas),
	reversa(OrdenadasPorPreferencia,OrdenadasPorPreferenciaInvertidas),
	iniciar_inferencias_multiples_relacion(OrdenadasPorPreferenciaInvertidas,RelacionesCompletas,Inferido,OrdenadasPorPreferenciaInvertidas,KB),
	append(RelInd,Inferido,Resultado).

recorrer_relaciones_heredadas([],_,[],_).

recorrer_relaciones_heredadas([Relacion=>(Valor,Pes)|B], RelacionesPropias,Resultado,KB):-
	buscar_relacion(Relacion,RelacionesPropias,X,KB),
	recorrer_relaciones_heredadas(B,RelacionesPropias,Resultado2,KB),
	verificar_resultado_repetido_relacion(X,Relacion=>(Valor,Pes),Resultado2,Resultado).

verificar_resultado_repetido_relacion(desconocido,Relacion=>(Valor,Pes),Resultado2,Resultado):-
	append([Relacion=>(Valor,Pes)],Resultado2,Resultado).

verificar_resultado_repetido_relacion(_,_,Resultado2,Resultado2).

iniciar_inferencias_multiples_relacion([],A,A,[],_).

iniciar_inferencias_multiples_relacion([],_,[],_,_).

iniciar_inferencias_multiples_relacion([Antecedentes=>>Relacion=>(Valor,Peso)|Resto],Relaciones,RelacionesInferidas,Preferencias,KB):-
	iniciar_inferencias_multiples_relacion(Resto,Relaciones,RelacionesInferidas2,Preferencias,KB),	
	buscar_relacion(Relacion,RelacionesInferidas2,X,KB), 
	append(Relaciones,RelacionesInferidas2,Completas),
	validar_no_existencia_relacion(X,Relacion,Preferencias,Completas,Inferir),
	verificar_inferencia(Inferir,Relacion,Peso,ResultadoInferido),
	append(ResultadoInferido,RelacionesInferidas2,RelacionesInferidas).
	
verificar_inferencia(desconocido,_,_,[]).
verificar_inferencia([],_,_,[]).
verificar_inferencia(Valor,Relacion,Peso,Resultado):-
	Resultado = [Relacion=>(Valor,Peso)].

validar_no_existencia_relacion(desconocido,Relacion,Preferencias,PropiedadesCompletas,Inferido):-
	extraer_preferencias_por_propiedad(Preferencias,Relacion,Filtradas),
	ordenar_preferencias(Filtradas,PreferenciasOrdenadas),
	inferir_propiedad(PreferenciasOrdenadas,Relacion,PropiedadesCompletas,Inferido,desconocido).

validar_no_existencia_relacion(_,_,_,_,[]).


% predicado que recorre el resto de las clase 谩rbol
recorrer_arbol_relaciones_completos_objetos([A|B],KB,IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,Resultado,KB):-
	obtener_relaciones_completas_por_objeto(A,KB,IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,ResultadoA,KB),
	recorrer_arbol_relaciones_completos_objetos(B,KB,IndividuoBuscar,RelacionesHerencia,PreferenciasHerencia,ResultadoB,KB),
	append(ResultadoA,ResultadoB,Resultado).

% predicado case base que detiene la recursividad
recorrer_arbol_relaciones_completos_objetos([],_,_,_,_,[],_).
%--------------------------------------------------------------------------------------------------------


%predicados para agregar una nueva clase ----------------------------------------------------------------

agregar_clase(Nueva,Padre,KB,NuevaKB) :-
	append(KB,[class(Nueva,Padre,[],[],[])],NuevaKB).

%--------------------------------------------------------------------------------------------------------


%predicados para agregar una nueva propiedad -----------------------------------------------------------

%% Agregar nueva propiedad de clase
%% [[ponen_huevos=>(si,0),vuelan=>(no,0),color=>(azul,0)],[]]
agregar_propiedad_clase(Class, NuevaProp, Valor, Negacion, OriginalKB, NuevaKB) :-
	cambiaElemento(class(Class, Mother, PropPref, Rels, Objects),class(Class, Mother, ListaNuevasProp, Rels, Objects), OriginalKB, NuevaKB),
	agregar_propiedad(PropPref, NuevaProp, Valor, Negacion, ListaNuevasProp).

agregar_propiedad([Props|_], NuevaProp, Valor, si, ListaNuevasProp):-
	append(Props, [no(NuevaProp=>Valor)], ListaNuevasProp).

agregar_propiedad([[]|Pre], NuevaProp, Valor, no, ListaNuevasProp):-
	append([NuevaProp=>Valor], Pre, ListaNuevasProp).

agregar_propiedad([Props|Pre], NuevaProp, Valor, no, ListaNuevasProp):-
	append([Props], [NuevaProp=>Valor,Pre], ListaNuevasProp).

agregar_propiedad([], NuevaProp, Valor, no, ListaNuevasProp):-
	append([], [NuevaProp=>Valor,[]], ListaNuevasProp).

cambiaElemento(_,_,[],[]).

cambiaElemento(X,Y,[X|T],[Y|N]):-
	cambiaElemento(X,Y,T,N).

cambiaElemento(X,Y,[H|T],[H|N]):-
	cambiaElemento(X,Y,T,N).

%--------------------------------------------------------------------------------------------------------


%definicion de los operadores ---------------------------------------------------------------------------

:- op(500,xfy,'=>').  %operador de asignacion
:- op(801,xfy,'=>>'). %operador de implicaci贸n
%--------------------------------------------------------------------------------------------------------


%----------------------------------------
% Admin de listas
%----------------------------------------

%Cambiar todas las ocurrencias de un elemento X en una lista por el valor de Y
%cambiaElemento(X,Y,InputList,OutputList).
%Example (p,b,[p,a,p,a,y,a],[b,a,b,a,y,a])

cambiaElemento(_,_,[],[]).

cambiaElemento(X,Y,[X|T],[Y|N]):-
	cambiaElemento(X,Y,T,N).

cambiaElemento(X,Y,[H|T],[H|N]):-
	cambiaElemento(X,Y,T,N).

%--------------------------------------------------------------------------------------------------
%Ejercicio 2 -> Agregar clases, objetos, propiedades, relaciones y preferencias
%--------------------------------------------------------------------------------------------------

%%************** Agregar Clase

agregar_clase(NewClass,Padre,KB,NuevaKB) :-
	append(KB,[class(NewClass,Padre,[],[],[])],NuevaKB).

%%************** Agregar Individuo/Objeto

agregar_individuo(NuevoIndiv,Class,KB,NuevaKB) :-
	cambiaElemento(class(Class,Padre,PropPref,RelPref,Indiv),class(Class,Padre,PropPref,RelPref,ListaNuevosIndiv),KB,NuevaKB),
	append(Indiv,[[id=>NuevoIndiv,[],[]]],ListaNuevosIndiv).

%%************** Agregar nueva propiedad de clase

agregar_propiedad_clase(Class,NuevaProp,Valor,Negacion,KB,NuevaKB) :-
	cambiaElemento(class(Class,Padre,PropPref,PropRel,Indiv),class(Class, Padre, ListaNuevasPropPref, PropRel, Indiv),KB,NuevaKB),
	agregar_propiedad_relacion(PropPref,NuevaProp,Valor,Negacion,ListaNuevasPropPref).

%%************** Agregar nueva propiedad de Individuo/Objeto

agregar_propiedad_individuo(Clase,Indiv,NuevaProp,Valor,Negacion,KB,NuevaKB) :-
	cambiaElemento(class(Clase,Padre,PropPref,RelPref,Indivs),class(Clase,Padre,PropPref,RelPref,ListaNuevosIndiv),KB,NuevaKB),
	member([id=>Indiv,PropPrefIndiv,RelPrefIndiv],Indivs),
	cambiaElemento([id=>Indiv,PropPrefIndiv,RelPrefIndiv],[id=>Indiv,ListaNuevasPropPref,RelPrefIndiv],Indivs,ListaNuevosIndiv),
	agregar_propiedad_relacion(PropPrefIndiv,NuevaProp,Valor,Negacion,ListaNuevasPropPref).

%%************** Agregar nueva preferencia de propiedades de clase

agregar_preferencia_propiedad_clase(Class, Antecedente, Consecuente, Valor, Negacion, KB, NuevaKB) :-
	cambiaElemento(class(Class, Padre, PropPref, PropRel, Indiv),class(Class, Padre, ListaNuevasPropPref, PropRel, Indiv), KB, NuevaKB),
	agregar_preferencia(PropPref, Antecedente, Consecuente, Valor, Negacion, ListaNuevasPropPref).

%%************** Agregar nueva preferencia de propiedades de clase
%% Pendiente

%%************** Agregar nueva relacion de clase

agregar_relacion_clase(Class,NuevaRel,Valor,Negacion,KB,NuevaKB) :-
	cambiaElemento(class(Class,Padre,PropPref,RelPref,Indiv),class(Class,Padre,PropPref,ListaNuevaRelPref,Indiv),KB,NuevaKB),
	agregar_propiedad_relacion(RelPref,NuevaRel,Valor,Negacion,ListaNuevaRelPref).

%%************** Agregar nueva relacion de Individuo/Objeto

agregar_relacion_individuo(Clase,Indiv,NuevaRel,Valor,Negacion,KB,NuevaKB) :-
	cambiaElemento(class(Clase,Padre,PropPref,RelPref,Indivs),class(Clase,Padre,PropPref,RelPref,ListaNuevosIndiv),KB,NuevaKB),
	member([id=>Indiv,PropPrefIndiv,RelPrefIndiv],Indivs),
	cambiaElemento([id=>Indiv,PropPrefIndiv,RelPrefIndiv],[id=>Indiv,PropPrefIndiv,ListaNuevaRelPref],Indivs,ListaNuevosIndiv),
	agregar_propiedad_relacion(RelPrefIndiv,NuevaRel,Valor,Negacion,ListaNuevaRelPref).

%%************** Agregar nueva preferencia de relacion de clase
%% [odia=>(humano)]=>>dentro=>(humano,0)
agregar_preferencia_relacion_clase(Class, Antecedente, Consecuente, Valor, Negacion, KB, NuevaKB) :-
	cambiaElemento(class(Class,Padre,PropPref,RelPref,Indiv),class(Class,Padre,PropPref,ListaNuevaRelPref,Indiv),KB,NuevaKB),
	agregar_preferencia(RelPref, Antecedente, Consecuente, Valor, Negacion, ListaNuevaRelPref).

%%************** Agregar nueva preferencia de relacion de clase
%% Pendiente

%% *************************************************************************
%% Predicados para agregar una nueva propiedad o relacion de clase

agregar_propiedad_relacion([],NuevaPropRel,Valor,si,ListaNuevasPropRelPref):-
	append([],[[no(NuevaPropRel=>Valor)], []],ListaNuevasPropRelPref).

agregar_propiedad_relacion([Props|Pref],NuevaPropRel,Valor,si,ListaNuevasPropRelPref):-
	append(Props,[no(NuevaPropRel=>Valor)],ListaActualPropRel),
	append([ListaActualPropRel],Pref,ListaNuevasPropRelPref).

agregar_propiedad_relacion([],NuevaPropRel,Valor,no,ListaNuevasPropRelPref):-
	append([],[[NuevaPropRel=>Valor], []],ListaNuevasPropRelPref).

agregar_propiedad_relacion([Props|Pref],NuevaPropRel,Valor,no,ListaNuevasPropRelPref):-
	append(Props,[NuevaPropRel=>Valor],ListaActualPropRel),
	append([ListaActualPropRel],Pref,ListaNuevasPropRelPref).

%% Predicados para agregar nueva preferencia de propiedad o relacion de clase

agregar_preferencia([], Antecedente, Consecuente, Valor, si, ListaNuevasPropPref):-
	append([], [[], [Antecedente=>>no(Consecuente=>Valor)]], ListaNuevasPropPref).

agregar_preferencia([Props|[Pref|_]], Antecedente, Consecuente, Valor, si, ListaNuevasPropPref):-
	append(Pref, [Antecedente=>>no(Consecuente=>Valor)], ListaActualPref),
	append([Props], [ListaActualPref], ListaNuevasPropPref).

agregar_preferencia([Props|[[]]], Antecedente, Consecuente, Valor, si, ListaNuevasPropPref):-
	append([], [Antecedente=>>no(Consecuente=>Valor)], ListaActualPref),
	append([Props], [ListaActualPref], ListaNuevasPropPref).

agregar_preferencia([], [Pr=>V], Consecuente, Valor, no, ListaNuevasPropPref):-
	R = [Pr=>(V)],
	append([], [[], [R=>>Consecuente=>Valor]], ListaNuevasPropPref).

agregar_preferencia([Props|[[]]], Antecedente, Consecuente, Valor, no, ListaNuevasPropPref):-
	append([], [Antecedente=>>Consecuente=>Valor], ListaActualPref),
	append([Props], [ListaActualPref], ListaNuevasPropPref).

agregar_preferencia([Props|[Pref|_]], Antecedente, Consecuente, Valor, no, ListaNuevasPropPref):-
	append(Pref, [Antecedente=>>Consecuente=>Valor], ListaActualPref),
	append([Props], [ListaActualPref], ListaNuevasPropPref).


% predicado para cambiar el peso de una preferencias ------------------------------------------------

cambiar_peso_preferencia_propiedad(PropiedadBuscar,KB,PesoNuevo,PesoViejo,KBNuevo):-
	buscar_preferencia_propiedad(top,PropiedadBuscar,KB,PesoNuevo,PesoViejo,KBNuevo).

%precicado base que detiene la recursividad
buscar_preferencia_propiedad([],_,_,_).


buscar_preferencia_propiedad(ClaseActual,PropiedadBuscar,KB,PesoNuevo,PesoViejo):-
	obtener_preferencias_clase(ClaseActual,KB,Preferencias), %obtenemos las preferencias de la clase
	buscar_preferencia_propiedad_existente(Preferencias,PropiedadBuscar,PesoViejo,PesoNuevo,R,KBG),

buscar_preferencia_propiedad_existente([],_,_,_,_,noencontrado,_).

buscar_preferencia_propiedad_existente([Antecedentes=>>Consecuente=>(Valor,PesoViejo)|_],Consecuente,PesoViejo,PesoNuevo,_,KBG):-
	KBG = [Antecedentes=>>Consecuente=>(Valor,PesoNuevo)].

buscar_preferencia_propiedad_existente([A|B],Consecuente,PesoViejo,PesoNuevo,R,KBM):-
	buscar_preferencia_propiedad_existente(B,Consecuente,PesoViejo,PesoNuevo,R,KBM2),
	append([A|B],KBM2,KBM).

% ---------------------------------------------------------------------------------------------------	
